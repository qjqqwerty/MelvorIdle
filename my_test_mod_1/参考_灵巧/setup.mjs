var E={$schema:"https://melvoridle.com/assets/schema/gameData.json",data:{skillData:[{skillID:"melvorD:Agility",data:{pillars:[{id:"PillarofEverything",name:"Pillar of Everything",itemCosts:[{id:"melvorD:Gold_Bar",quantity:30000},{id:"melvorD:Silver_Bar",quantity:30000}],gpCost:150000000,scCost:0,modifiers:{}}],obstacles:[{id:"MergedCategory0",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:0,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory1",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:1,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory2",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:2,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory3",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:3,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory4",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:4,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory5",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:5,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory6",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:6,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory7",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:7,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory8",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:8,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory9",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:9,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]}]}}]}};var M={$schema:"https://melvoridle.com/assets/schema/gameData.json",data:{skillData:[{skillID:"melvorD:Agility",data:{elitePillars:[{id:"ElitePillarOfEverything",name:"Elite Pillar of Everything",itemCosts:[{id:"melvorTotH:Carrion_Logs",quantity:90000},{id:"melvorTotH:Divinite_Bar",quantity:90000}],gpCost:750000000,scCost:3000000,modifiers:{}}],obstacles:[{id:"MergedCategory10",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:10,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory11",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:11,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory12",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:12,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory13",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:13,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]},{id:"MergedCategory14",name:"Merged Obstacle",media:"img/agility.svg",itemCosts:[],gpCost:0,scCost:0,modifiers:{},category:14,baseInterval:1,skillRequirements:[],baseExperience:0,gpReward:0,scReward:0,itemRewards:[]}]}}]}};async function Y0(L){if(await L.gameData.addPackage(E),cloudManager.hasTotHEntitlement)await L.gameData.addPackage(M);p();const P=L.settings.section("Costs"),H=L.settings.section("Rewards"),W=L.settings.section("Others");P.add([{name:"obstacle-costs",type:"dropdown",label:"Obstacle Cost Modifier",default:"0",onChange:(K)=>{if(W.get("buy-first")){if(K!=0)document.getElementById("bypassAgilityCosts:buy-first").labels[0].classList.remove("text-warning"),y(K,"obstacle-costs");if(K==0)document.getElementById("bypassAgilityCosts:buy-first").labels[0].classList.add("text-warning"),y(K,"obstacle-costs"),q("Obstacle cost modifier is currently set to 0x",{duration:8000},"primary"),setTimeout(()=>q("Bypass after 1st build has no effect unless its changed",{duration:5000},"primary"),3000)}},options:[{value:"0",display:"0x (Free)"},{value:"0.25",display:"0.25x"},{value:"0.5",display:"0.5x"},{value:"0.75",display:"0.75x"},{value:"1",display:"1x (Default)"},{value:"2",display:"2x"},{value:"4",display:"4x"},{value:"10",display:"10x"}]},{name:"pillar-costs",type:"dropdown",label:"Pillar Cost Modifier",default:"0",options:[{value:"0",display:"0x (Free)"},{value:"0.25",display:"0.25x"},{value:"0.5",display:"0.5x"},{value:"0.75",display:"0.75x"},{value:"1",display:"1x (Default)"},{value:"1.25",display:"1.25x"},{value:"1.5",display:"1.5x"},{value:"2",display:"2x"},{value:"3",display:"3x"},{value:"4",display:"4x"}]},{name:"item-cost-reduction",type:"dropdown",label:"Item cost reduction per build",default:"4",onChange:()=>game.agility.onObstacleChange(),options:[{value:"1",display:"1%"},{value:"2",display:"2%"},{value:"3",display:"3%"},{value:"4",display:"4% (Default)"},{value:"5",display:"5%"},{value:"6",display:"6%"},{value:"7",display:"7%"},{value:"8",display:"8%"},{value:"10",display:"10%"}]}]),H.add([{name:"xp-rewards",type:"dropdown",label:"Obstacle XP Rewards",default:"1",onChange:()=>game.agility.onObstacleChange(),options:[{value:"1",display:"1x (Default)"},{value:"1.25",display:"1.25x"},{value:"1.5",display:"1.5x"},{value:"2",display:"2x"},{value:"3",display:"3x"},{value:"4",display:"4x"},{value:"5",display:"5x"},{value:"10",display:"10x"}]},{name:"gp-rewards",type:"dropdown",label:"Obstacle GP Rewards",default:"1",onChange:()=>{game.agility.renderQueue.obstacleModifiers=!0,game.agility.onObstacleChange()},options:[{value:"1",display:"1x (Default)"},{value:"1.25",display:"1.25x"},{value:"1.5",display:"1.5x"},{value:"2",display:"2x"},{value:"3",display:"3x"},{value:"4",display:"4x"},{value:"5",display:"5x"},{value:"10",display:"10x"}]},{name:"pos-mult-mod",type:"dropdown",label:"Global Active Passives",default:"1",onChange:(K)=>{game.agility.renderQueue.obstacleModifiers=!0,game.agility.renderQueue.builtObstacles=!0,setTimeout(()=>{if(game.agility.onObstacleChange(),K!=1)b(K)},1200)},options:[{value:"0.5",display:"0.5x"},{value:"1",display:"1x (Default)"},{value:"1.25",display:"1.25x"},{value:"1.5",display:"1.5x"},{value:"2",display:"2x"},{value:"3",display:"3x"},{value:"5",display:"5x"}]}]),W.add([{name:"buy-first",label:"Bypass obstacle costs after 1st build only",hint:" Obstacle cost modifiers apply to 1st build but will be 0x after",type:"switch",default:0,onChange:(K)=>{let U=document.getElementById("bypassAgilityCosts:buy-first");if(K&&P.get("obstacle-costs")==0)U.labels[0].classList.add("text-warning"),y(P.get("obstacle-costs"),"obstacle-costs"),q("Obstacle cost modifier is currently set to 0x",{duration:8000},"primary"),setTimeout(()=>q("Bypass after 1st build has no effect unless its changed",{duration:5000},"primary"),3000);else document.getElementById("bypassAgilityCosts:obstacle-costs").classList.remove("text-warning"),U.labels[0].classList.remove("text-warning")}},{type:"switch",name:"link-passives",label:"Link obstacle passives if mastered",hint:"Inherit passives from mastered obstacles in their tier",default:!1,onChange:()=>{game.agility.renderQueue.obstacleModifiers=!0,setTimeout(()=>game.agility.onObstacleChange(),250)}},{name:"item-costs-to-gp",label:"Replace item costs with each item's GP value",hint:" Average Item Alchemy IV value + 50% Base GP Cost",type:"switch",default:!1,onChange:(K)=>setTimeout(()=>n(K),500)},{name:"bypass-item-reduction-stack-limit",label:"Bypass item cost reduction stack limit",hint:" Obstacle cost reductions per build stack to cap",type:"switch",default:0,onChange:(K)=>setTimeout(()=>d(K),500)},{type:"switch",name:"merge-all",label:"Enable merged obstacles and pillars",hint:" Merges all costs, rewards, intervals, and passives",default:!1,onChange:(K)=>T(K)},{name:"max-mastery-bypass",label:"No costs if all obstacles are mastered",type:"switch",onChange:()=>game.agility.renderQueue.builtObstacles=!0,default:!1},{name:"bypass-level-req",label:"Bypass level requirements",type:"switch",default:!1},{name:"disable-neg-mult",label:"Disable negative modifiers",type:"switch",default:0,onChange:(K)=>{game.agility.renderQueue.obstacleModifiers=!0,setTimeout(()=>{if(K)r(K);else W.set("apply-to-mastered-only",!1);game.agility.computeProvidedStats()},250)}}]),L.settings.type("hiddenSetting",{render:S,get:u,set:m}),W.add([{name:"apply-to-pillars",type:"hiddenSetting",default:!1},{name:"convert-after-built",type:"hiddenSetting",default:!1},{name:"apply-to-mastered-only",type:"hiddenSetting",default:!1},{name:"default-item-reduction-cap",type:"hiddenSetting",default:!1}]);function S(K,U,z){const X=document.createElement("hiddenSetting");X.id=K,X.type="custom",X.name=K;const F=document.createElement("div");return F.appendChild(X),F.className="invisible",F}function u(K){return K.querySelector("hiddenSetting").value}function m(K,U){K.querySelector("hiddenSetting").value=U}function q(K="notif",U={},z="success"){const X=L.getResourceUrl("img/icon-bac.svg");U=Object.assign({},{duration:5000,lowPriority:!1},U),Toastify({text:`<div class="text-center"><img class="notification-img" src="${X}" height="auto" width="auto" style="margin: 4px;"><span class="badge badge-${z}"> ${K} </span></div>`,duration:U.duration,gravity:"top",position:"center",backgroundColor:"transparent",stopOnFocus:!0}).showToast()}function y(K,U){let z=document.getElementById(`bypassAgilityCosts:${U}`);if(K==0)z.classList.add("text-warning");else z.classList.remove("text-warning")}function p(){let K=cloudManager.hasTotHEntitlement?15:10;for(let U=0;U<K;U++){let z=[],X=[],F=0,J=0,Y=0,Z=0,j=0,h=0,D=game.agility.actions.filter((B)=>B.category===U);D.forEach((B)=>{if(B.namespace!=="bypassAgilityCosts"){if(B.itemCosts.length>0)B.itemCosts.forEach((k)=>{z.push(k)});if(B.skillRequirements.length>0)B.skillRequirements.forEach((k)=>{X.push(k)});if(B.gpCost>0)F+=B.gpCost;if(B.scCost>0)J+=B.scCost;if(B.gpReward>0)Y+=B.gpReward;if(B.scReward>0)Z+=B.scReward;if(B.baseExperience>0)j+=B.baseExperience;if(B.baseInterval>0)h+=B.baseInterval}});let Q=D[D.length-1];Q._name=`Tier ${U+1} Merged Obstacle`,Q.itemCosts=z,Q.skillRequirements=X,Q.gpCost=F,Q.scCost=J,Q.gpReward=Y,Q.scReward=Z,Q.baseExperience=j,Q.baseInterval=h}L.patch(Agility,"getMasteryXPToAddForAction").replace(function(U,z,X){let F=(this.totalUnlockedMasteryActions*this.totalCurrentMasteryLevel/this.trueMaxTotalMasteryLevel+this.getMasteryLevel(z)*(this.trueTotalMasteryActions/10))*(X/1000)/2;if(F*=1+this.getMasteryXPModifier(z)/100,z.namespace==="bypassAgilityCosts"){let J=this.actions.filter((Z)=>Z.category===z.category);return F/(J.length-1)}return F})}function T(K){if(game.agility.renderQueue.obstacleModifiers=!0,!K)q("Merged buildings disabled and hidden from menus",{duration:3000},"primary"),console.log("\n[BAC] Merged buildings disabled\n ");else q("Merged obstacles and pillars enabled",{duration:3000},"primary"),console.log("\n[BAC] Merged buildings enabled\n ");N(K),setTimeout(()=>game.agility.onObstacleChange(),250)}function n(K){if(!K){W.set("convert-after-built",!1);return}Swal.fire({title:"After First Build Only?",html:'<h5 class="font-w400 text-combat-smoke font-size-sm mb-2">Obstacle item costs will be converted to GP only after being built at least once while pillar item costs are always converted</h5>',showCancelButton:!0,icon:"question",confirmButtonText:"After First Build",cancelButtonText:"Always Replace"}).then((U)=>{if(W.set("convert-after-built",U.isConfirmed),!W.get("convert-after-built"))q("After first build not selected: item costs will be converted to GP as enabled",{duration:4000},"secondary"),setTimeout(()=>q("Item cost conversion details can be viewed in the console",{duration:7000},"secondary"),2000);if(W.get("convert-after-built"))q("Convert item costs to GP only after first build selected",{duration:4000},"secondary"),setTimeout(()=>q("Item cost conversion details can be viewed in the console",{duration:7000},"secondary"),2000)})}function d(K){if(!K){W.set("default-item-reduction-cap",!1);return}Swal.fire({title:"Use default reduction cap?",html:'<h5 class="font-w400 text-combat-smoke font-size-sm mb-2">Use default 95% (100% with shop purchase) cap or bypass requirements and use 100%</h5>',showCancelButton:!0,icon:"question",confirmButtonText:"Default",cancelButtonText:"100%"}).then((U)=>{if(W.set("default-item-reduction-cap",U.isConfirmed),!W.get("default-item-reduction-cap"))q("100% selected: obstacle item cost reductions can reach up to 100%",{duration:5000},"secondary");if(W.get("default-item-reduction-cap"))q("Default selected: obstacle item cost reductions can reach 95% or 100% with shop purchase",{duration:5000},"secondary")})}function b(K){Swal.fire({title:"Apply to Pillar Passives?",html:`<h5 class="font-w400 text-combat-smoke font-size-sm mb-2">Apply ${H.get("pos-mult-mod")}x global passive modifier to pillar passives</h5>`,showCancelButton:!0,icon:"question",confirmButtonText:"Apply to Pillars",cancelButtonText:"Obstacles Only"}).then((U)=>{if(W.set("apply-to-pillars",U.isConfirmed),game.agility.renderQueue.obstacleModifiers=!0,!W.get("apply-to-pillars"))q("Apply to pillars not selected: pillar passives will not be modified",{duration:4000},"secondary");if(W.get("apply-to-pillars"))q(`${H.get("pos-mult-mod")}x global passive modifier applied to pillar passives`,{duration:4000},"secondary");if(setTimeout(()=>game.agility.onObstacleChange(),250),mod.manager.getLoadedModList().includes("[Myth] Combat Simulator"))setTimeout(()=>q("A reload may be needed for modified passives to reflect on [Myth] Combat Simulator",{duration:6000},"secondary"),3000)})}function r(K){Swal.fire({title:"Disable for mastered obstacles only?",html:'<h5 class="font-w400 text-combat-smoke font-size-sm mb-2">Disable negative modifiers for any obstacle with 99 mastery</h5>',showCancelButton:!0,icon:"question",confirmButtonText:"Mastered Obstacles Only",cancelButtonText:"All Obstacles"}).then((U)=>{if(W.set("apply-to-mastered-only",U.isConfirmed),game.agility.renderQueue.obstacleModifiers=!0,!W.get("apply-to-mastered-only"))q("Disable negative modifiers for all obstacles selected",{duration:4000},"secondary");if(W.get("apply-to-mastered-only"))q("Disable negative modifiers for mastered obstacles selected",{duration:4000},"secondary");setTimeout(()=>game.agility.onObstacleChange(),250)})}function N(K){if(L.patch(Agility,"viewObstacleSelectionOnClick").replace(function(U,z){var X,F;if(this.level<this.getObstacleLevel(z))return;const J=this.actions.filter((Y)=>Y.category===z);if(K?this.createSelectionMenus(J.length):this.createSelectionMenus(J.length-1),agilityObstacleSelectMenus.forEach((Y,Z)=>{if(K&&Z<J.length)showElement(Y),Y.setObstacle(J[Z]);else if(!K&&Z<J.length-1)showElement(Y),Y.setObstacle(J[Z]);else hideElement(Y)}),(X=document.getElementById("build-pillar-info"))===null||X===void 0||X.classList.replace("d-flex","d-none"),(F=document.getElementById("build-obstacle-info"))===null||F===void 0||F.classList.replace("d-none","d-flex"),$("#modal-select-agility-obstacle").modal("show"),W.get("item-costs-to-gp"))return z}),L.patch(Agility,"viewPillarSelectionOnClick").replace(function(U){var z,X;if(!this.passivePillarUnlocked)return;const F=this.pillars.allObjects;K?this.createSelectionMenus(F.length):this.createSelectionMenus(F.length-1),agilityObstacleSelectMenus.forEach((J,Y)=>{if(K&&Y<F.length)showElement(J),J.setPillar(F[Y]);else if(!K&&Y<F.length-1)showElement(J),J.setPillar(F[Y]);else hideElement(J)}),(z=document.getElementById("build-pillar-info"))===null||z===void 0||z.classList.replace("d-none","d-flex"),(X=document.getElementById("build-obstacle-info"))===null||X===void 0||X.classList.replace("d-flex","d-none"),$("#modal-select-agility-obstacle").modal("show")}),cloudManager.hasTotHEntitlement)L.patch(Agility,"viewElitePillarSelectionOnClick").replace(function(U){var z,X;if(!this.elitePassivePillarUnlocked)return;const F=this.elitePillars.allObjects;K?this.createSelectionMenus(F.length):this.createSelectionMenus(F.length-1),agilityObstacleSelectMenus.forEach((J,Y)=>{if(K&&Y<F.length)showElement(J),J.setElitePillar(F[Y]);else if(!K&&Y<F.length-1)showElement(J),J.setElitePillar(F[Y]);else hideElement(J)}),(z=document.getElementById("build-pillar-info"))===null||z===void 0||z.classList.replace("d-none","d-flex"),(X=document.getElementById("build-obstacle-info"))===null||X===void 0||X.classList.replace("d-flex","d-none"),$("#modal-select-agility-obstacle").modal("show")})}function f(){if(W.get("max-mastery-bypass")&&game.agility.totalCurrentMasteryLevel===game.agility.sortedMasteryActions.length*game.agility.masteryLevelCap)return!0}function x(K){let U=H.get("pos-mult-mod"),z=W.get("disable-neg-mult"),X=W.get("merge-all"),F=W.get("apply-to-mastered-only");const J=new MappedModifiers,Y=game.agility.getMasteryLevel(K);let Z=Y>=99?0.5:1;if(game.agility.hasMasterRelic)Z=0;const j=game.agility.actions.filter((h)=>h.category===K.category);if(K.namespace==="bypassAgilityCosts"){const h=game.agility.getMasteryLevel(K);if(!X)J.addModifiers(K.modifiers,0,0);else j.forEach((D)=>{const Q=game.agility.getMasteryLevel(D);let B=Q>=99?0.5:1;if(h>=99)B=F?0:0.5;if(game.agility.hasMasterRelic)B=0;z?F?Q>=99?J.addModifiers(D.modifiers,0,U):J.addModifiers(D.modifiers,B,U):J.addModifiers(D.modifiers,0,U):J.addModifiers(D.modifiers,B,U)})}else z?F?Y>=99?J.addModifiers(K.modifiers,0,U):J.addModifiers(K.modifiers,Z,U):J.addModifiers(K.modifiers,0,U):J.addModifiers(K.modifiers,Z,U);return J}function g(K){if(!W.get("link-passives"))return;let U=H.get("pos-mult-mod"),z=W.get("disable-neg-mult");const X=new MappedModifiers,J=game.agility.getMasteryLevel(K)>=99?0.5:1;return game.agility.actions.filter((Z)=>Z.category===K.category).forEach((Z)=>{if(Z.namespace==="bypassAgilityCosts"||Z===K||K.category===6)return;if(game.agility.getMasteryLevel(Z)>=99)z||game.agility.hasMasterRelic?X.addModifiers(Z.modifiers,0,U):X.addModifiers(Z.modifiers,0.5,U)}),X}function c(){if(L.patch(Agility,"getObstacleModifiers").replace(function(K,U){let z=H.get("pos-mult-mod"),X=W.get("disable-neg-mult"),F=W.get("link-passives"),J=W.get("merge-all"),Y=W.get("apply-to-mastered-only");const Z=new MappedModifiers,j=this.getMasteryLevel(U);let h=j>=99?0.5:1;if(this.hasMasterRelic)h=0;const D=this.actions.filter((Q)=>Q.category===U.category);if(U.namespace==="bypassAgilityCosts"){const Q=game.agility.getMasteryLevel(U);if(!J)Z.addModifiers(U.modifiers,0,0);else D.forEach((B)=>{const k=game.agility.getMasteryLevel(B);let V=k>=99?0.5:1;if(Q>=99)V=Y?0:0.5;if(this.hasMasterRelic)V=0;X?Y?k>=99?Z.addModifiers(B.modifiers,0,z):Z.addModifiers(B.modifiers,V,z):Z.addModifiers(B.modifiers,0,z):Z.addModifiers(B.modifiers,V,z)})}else if(F)X?Y?j>=99?Z.addModifiers(U.modifiers,0,z):Z.addModifiers(U.modifiers,h,z):Z.addModifiers(U.modifiers,0,z):Z.addModifiers(U.modifiers,h,z),D.forEach((Q)=>{if(Q.namespace==="bypassAgilityCosts"||Q===U||U.category===6)return;if(this.getMasteryLevel(Q)>=99)X?Y?j>=99?Z.addModifiers(Q.modifiers,0,z):Z.addModifiers(Q.modifiers,h,z):Z.addModifiers(Q.modifiers,0,z):Z.addModifiers(Q.modifiers,h,z)});else X?Y?j>=99?Z.addModifiers(U.modifiers,0,z):Z.addModifiers(U.modifiers,h,z):Z.addModifiers(U.modifiers,0,z):Z.addModifiers(U.modifiers,h,z);return Z}),L.patch(Agility,"renderCourseModifiers").replace(function(K){if(!this.renderQueue.obstacleModifiers)return;this.builtObstacles.forEach((U,z)=>{if(z>this.maxObstacles)return;const X=agilityObstacleMenus[z];if(X.updatePassives(x(U)),W.get("link-passives")&&U.namespace!="bypassAgilityCosts")X.updatePassives(g(U),!0)}),this.renderQueue.obstacleModifiers=!1}),L.patch(BuiltAgilityObstacle,"updatePassives").replace(function(K,U,z=!1){if(!z)this.bonusContainer.textContent="";if(z&&U.skillModifiers.size==0&&U.standardModifiers.size==0)return;z&&U!=null&&W.get("link-passives")?this.bonusContainer.append(...U.getModifierDescriptionsAsNodes("h5",["font-size-sm","m-1","text-info"])):this.bonusContainer.append(...U.getModifierDescriptionsAsNodes("h5",["font-size-sm","m-1"]))}),L.patch(AgilityObstacleSelection,"setPassives").replace(function(K,U,z=!1){if(!z)this.passivesContainer.textContent="";if(z&&U.skillModifiers.size==0&&U.standardModifiers.size==0)return;z&&U!=null&&W.get("link-passives")?this.passivesContainer.append(...U.getModifierDescriptionsAsNodes("h5",["font-size-sm","m-1","text-info"])):this.passivesContainer.append(...U.getModifierDescriptionsAsNodes("h5",["font-size-sm","m-1"]))}),L.patch(Agility,"computeProvidedStats").replace(function(K,U=!0){this.modifiers.reset();const z=this.numObstaclesUnlocked;let X=!0,F=!0;for(let J=0;J<z;J++){const Y=this.builtObstacles.get(J),Z=Y===void 0||Y instanceof DummyObstacle;if(J<10&&Z){X=!1,F=!1;break}else if(Z){F=!1;break}else{const j=x(Y),h=g(Y);if(this.modifiers.addMappedModifiers(j),W.get("link-passives")&&Y.namespace!="bypassAgilityCosts")this.modifiers.addMappedModifiers(h)}}if(this.passivePillarUnlocked&&X&&this.builtPassivePillar!==void 0)this.modifiers.addMappedModifiers(this.getPillarModifiers(this.builtPassivePillar));if(this.elitePassivePillarUnlocked&&F&&this.builtElitePassivePillar!==void 0)this.modifiers.addMappedModifiers(this.getPillarModifiers(this.builtElitePassivePillar));if(U)this.game.combat.player.computeAllStats()}),L.patch(Agility,"getAllBlueprintModifiers").replace(function(K,U){const z=new MappedModifiers;if(U.obstacles.forEach((X)=>{if(z.addMappedModifiers(x(X)),W.get("link-passives"))z.addMappedModifiers(g(X))}),U.pillar!==void 0)z.addMappedModifiers(this.getPillarModifiers(U.pillar));if(U.elitePillar!==void 0)z.addMappedModifiers(this.getPillarModifiers(U.elitePillar));return z}),L.patch(Agility,"getPillarModifiers").replace(function(K,U){let z=H.get("pos-mult-mod");if(W.get("apply-to-pillars")==!1)z=1;const X=U._localID.includes("Elite")?this.elitePillars.filter((J)=>J._namespace.isModded==!1):this.pillars.filter((J)=>J._namespace.isModded==!1),F=new MappedModifiers;if(U.namespace==="bypassAgilityCosts")if(!W.get("merge-all"))F.addModifiers(U.modifiers,1,0);else X.forEach((J)=>F.addModifiers(J.modifiers,1,z));else F.addModifiers(U.modifiers,1,z);return F}),L.patch(PassivePillarMenu,"setBuilt").replace(function(K,U){let z=H.get("pos-mult-mod");if(W.get("apply-to-pillars")===!1)z=1;showElement(this.builtContent),hideElement(this.unbuiltContent),this.name.textContent=U.name,this.blockContainer.classList.replace("border-agility","border-warning"),this.blockContainer.classList.remove("pointer-enabled"),this.blockContainer.onclick=null,this.pillarSelectButton.onclick=()=>game.agility.viewPillarSelectionOnClick(),this.pillarDestroyButton.onclick=()=>game.agility.destroyPillarOnClick();let X=new MappedModifiers;if(U.namespace==="bypassAgilityCosts")!W.get("merge-all")?X.addModifiers(U.modifiers,1,0):X=game.agility.getPillarModifiers(U);else X.addModifiers(U.modifiers,1,z);this.updatePassives(X)}),cloudManager.hasTotHEntitlement)L.patch(ElitePassivePillarMenu,"setBuilt").replace(function(K,U){let z=H.get("pos-mult-mod");if(W.get("apply-to-pillars")===!1)z=1;showElement(this.builtContent),hideElement(this.unbuiltContent),this.name.textContent=U.name,this.blockContainer.classList.replace("border-agility","border-warning"),this.blockContainer.classList.remove("pointer-enabled"),this.blockContainer.onclick=null,this.pillarSelectButton.onclick=()=>game.agility.viewElitePillarSelectionOnClick(),this.pillarDestroyButton.onclick=()=>game.agility.destroyElitePillarOnClick();let X=new MappedModifiers;if(U.namespace==="bypassAgilityCosts")!W.get("merge-all")?X.addModifiers(U.modifiers,1,0):X=game.agility.getPillarModifiers(U);else X.addModifiers(U.modifiers,1,z);this.updatePassives(X)})}function i(){let K={},U={};function z(F,J,Y,Z,j,h,D,Q=!1,B=!1,k){const V=Math.round((1-Z)*100);if(this["Item costs to convert"]=F,this["Total Item Alch IV * Quantity"]=J.toLocaleString("en-US"),this["Average Item Alch IV"]=Y.toLocaleString("en-US"),!Q)this["Item Cost Reduction"]=V+"%";if(this["Base GP Cost"]=h.toLocaleString("en-US"),!B){if(!Q)this["( Avg IA4 + 50% Base GP ) - ICR"]=j.toLocaleString("en-US");if(Q)this["Avg IA4 + 50% Base GP"]=j.toLocaleString("en-US")}else this["Avg IA4 + 50% Base GP"]=j.toLocaleString("en-US");if(this["New total GP cost"]=D.toLocaleString("en-US"),B)this["Blueprint Cumulative Total"]=k.toLocaleString("en-US")}function X(F=!1,J,Y){if(!W.get("item-costs-to-gp"))return;if(F){const Z=game.agility.actions.filter((h)=>h.category===J);let j=!1;if(Z.forEach((h)=>{if(h.itemCosts.length>0)j=!0}),!j)return;console.log(`\n[BAC] Item costs converted to GP in Tier ${J+1}:\n `)}else if(!F&&J===0)console.log("\n[BAC] Pillar item costs converted to GP:\n ");else if(!F&&J===1)console.log("\n[BAC] Elite Pillar item costs converted to GP:\n ");if(Y!==void 0)console.log(`\n[BAC] Item costs to be converted to GP for blueprint '${Y.name}':\n `);console.table(U),K={},U={}}if(L.patch(Agility,"addSingleObstacleBuildCost").replace(function(F,J,Y,Z){let j=W.get("item-costs-to-gp"),h=P.get("obstacle-costs"),D=W.get("buy-first"),Q=this.obstacleBuildCount.get(J);const B=this.getObstacleCostModifier(J);if(D){if(Q==0&&h==0)h=1;if(Q>=1&&h>0)h=0}if(f())h=0;if(J.gpCost>0){const V=Math.floor(J.gpCost*(1+B/100)*h);if(V>0)Y.addGP(V)}if(J.scCost>0)Y.addSlayerCoins(Math.floor(J.scCost*(1+B/100)*h));const k=this.getObstacleItemCostModifier(J);if((j&&!W.get("convert-after-built")||j&&W.get("convert-after-built")&&Q>0)&&J.itemCosts.length>0){let V=0,w=Y.gp,C=Y.gp*0.5;if(Z)w=Math.floor(J.gpCost*(1+B/100)*h),C=w*0.5;let v=0,A=0,_=0,O=0;J.itemCosts.forEach(({item:l,quantity:o})=>{let t=l.sellsFor*2.5*o;A+=t,_+=1}),O=A/_;let I=Math.floor((O+C)*(1+k/100)*h);v=I,Y.addGP(I),V+=Y.gp;let R=w+I;if(!Z)R=Y.gp;let G=J.name;if(J.name==="Merged Obstacle")G="T"+(J.category+1)+" Merged Obstacle";K[G]=new z(_,Math.round(A),Math.round(O),1+k/100,v,w,R,!1,Z,V),U={...K}}else J.itemCosts.forEach(({item:V,quantity:w})=>{const C=Math.floor(w*(1+k/100)*h);if(C>0)Y.addItem(V,C)})}),L.patch(Agility,"addSinglePillarBuildCost").replace(function(F,J,Y,Z){let j=P.get("pillar-costs");if(f())j=0;const h=this.game.modifiers.increasedAgilityPillarCost-this.game.modifiers.decreasedAgilityPillarCost;if(J.gpCost>0)Y.addGP(Math.floor(J.gpCost*(1+h/100))*j);if(J.scCost>0)Y.addSlayerCoins(Math.floor(J.scCost*(1+h/100))*j);if(W.get("item-costs-to-gp")&&J.itemCosts.length>0){let D=0,Q=Y.gp,B=Q*0.5;if(Z)Q=Math.floor(J.gpCost*(1+h/100)*j),B=Q*0.5;let k=0,V=0,w=0,C=0;J.itemCosts.forEach(({item:_,quantity:O})=>{let I=_.sellsFor*2.5*O;V+=I,w+=1}),C=V/w;let v=Math.floor((C+B)*(1+h/100)*j);k+=v,Y.addGP(v),D+=Y.gp;let A=Q+v;if(!Z)A=Y.gp;K[J.name]=new z(w,Math.round(V),Math.round(C),1+h/100,k,Q,A,!0,Z,D),U={...K}}else J.itemCosts.forEach(({item:D,quantity:Q})=>{Y.addItem(D,Math.floor(Q*(1+h/100))*j)})}),L.patch(Agility,"getObstacleCostModifier").replace(function(F,J){let Y=P.get("obstacle-costs"),Z=W.get("buy-first");if(f())Y=0;if(!Z&&Y===0)return-100;let j=this.game.modifiers.increasedAgilityObstacleCost-this.game.modifiers.decreasedAgilityObstacleCost;const h=this.getMasteryLevel(J);if(h>=80)j-=10;if(h>=95)j-=10;if(this.isPoolTierActive(2))j-=10;const D=this.game.modifiers.agilityItemCostReductionCanReach100>0?100:95;return Math.max(j,-D)}),L.patch(Agility,"getPillarBuildCosts").replace(function(F,J){let Y=P.get("pillar-costs");if(f())Y=0;const Z=this.game.modifiers.increasedAgilityPillarCost-this.game.modifiers.decreasedAgilityPillarCost,j=new Costs(this.game);if(j.setSource(`Skill.${this.id}.BuildPillar.${J.id}`),J.gpCost>0)j.addGP(Math.floor(J.gpCost*(1+Z/100))*Y);if(J.scCost>0)j.addSlayerCoins(Math.floor(J.scCost*(1+Z/100))*Y);if(W.get("item-costs-to-gp")&&J.itemCosts.length>0){const h=j.gp,D=j.gp*0.5;let Q=0,B=0,k=0,V=0;J.itemCosts.forEach(({item:C,quantity:v})=>{let A=C.sellsFor*2.5*v;B+=A,k+=1}),V=B/k;let w=Math.floor((V+D)*(1+Z/100)*Y);Q+=w,j.addGP(w),K[J.name]=new z(k,Math.round(B),Math.round(V),1+Z/100,Q,h,j.gp,!0,!1),U={...K}}else J.itemCosts.forEach(({item:h,quantity:D})=>{const Q=Math.floor(D*(1+Z/100))*Y;if(Q>0)j.addItem(h,Q)});return j}),L.patch(Agility,"viewObstacleSelectionOnClick").after((F)=>X(!0,F)),L.patch(Agility,"viewPillarSelectionOnClick").after(()=>X(!1,0)),cloudManager.hasTotHEntitlement)L.patch(Agility,"viewElitePillarSelectionOnClick").after(()=>X(!1,1));L.patch(Agility,"getBlueprintCostToBuild").replace(function(F,J){const Y=new Costs(this.game);if(Y.setSource(`Skill.${this.id}.BuildBlueprint`),J.obstacles.forEach((Z)=>{if(!this.isObstacleBuilt(Z))this.addSingleObstacleBuildCost(Z,Y,!0)}),J.pillar!==void 0&&!this.isPillarBuilt(J.pillar))this.addSinglePillarBuildCost(J.pillar,Y,!0);if(J.elitePillar!==void 0&&!this.isElitePillarBuilt(J.elitePillar))this.addSinglePillarBuildCost(J.elitePillar,Y,!0);if(W.get("item-costs-to-gp"))X(void 0,void 0,J);return Y}),L.patch(Agility,"getObstacleItemCostModifier").replace(function(F,J){let Y=P.get("obstacle-costs"),Z=W.get("buy-first"),j=W.get("bypass-item-reduction-stack-limit"),h=P.get("item-cost-reduction");if(f())Y=0;if(!Z&&Y===0)return-100;let D=this.getObstacleCostModifier(J);if(this.isPoolTierActive(3))D-=15;let Q=this.obstacleBuildCount.get(J);if(Q!==void 0&&Z&&Q>=1)return-100;let B=Math.round(100/h);if(Q!==void 0)if(j)if(!W.get("default-item-reduction-cap"))return Q=Math.min(Q,B),D-=h*Q,Math.max(D,-100);else Q=Math.min(Q,B),D-=h*Q;else Q=Math.min(Q,10),D-=h*Q;D-=this.game.modifiers.decreasedAgilityObstacleItemCost;const k=this.game.modifiers.agilityItemCostReductionCanReach100>0?100:95;return Math.max(D,-k)}),L.patch(Agility,"getObstacleItemCostModifier").after((F,J)=>{let Y=W.get("bypass-item-reduction-stack-limit");const Z=game.agility.game.modifiers.agilityItemCostReductionCanReach100>0?100:95;let j=P.get("item-cost-reduction"),h=Math.round(100/j);if(Y)if(!W.get("default-item-reduction-cap"))document.getElementById("agility-obstacle-info-0").textContent=templateLangString("MENU_TEXT_OBSTACLE_INFO_0",{reduction:j,maxStacks:h}),document.getElementById("agility-obstacle-info-1").textContent="Cost reductions are capped at 100%";else h=Math.round(Z/j),document.getElementById("agility-obstacle-info-0").textContent=templateLangString("MENU_TEXT_OBSTACLE_INFO_0",{reduction:j,maxStacks:h}),document.getElementById("agility-obstacle-info-1").textContent=templateLangString("MENU_TEXT_OBSTACLE_INFO_1",{reductionCap:"95"});else document.getElementById("agility-obstacle-info-0").textContent=templateLangString("MENU_TEXT_OBSTACLE_INFO_0",{reduction:j,maxStacks:"10"}),document.getElementById("agility-obstacle-info-1").textContent=templateLangString("MENU_TEXT_OBSTACLE_INFO_1",{reductionCap:"95"})})}function a(){L.patch(Agility,"onMasteryLevelUp").replace(function(K,U,z,X){if(this.updateTotalCurrentMasteryLevel(),this.game.completion.updateSkillMastery(this),X>=99)this.game.combat.notifications.add({type:"Mastery99",args:[U]});else this.game.combat.notifications.add({type:"Mastery",args:[U,X]});if(X>=99&&(this.isObstacleBuilt(U)||W.get("link-passives")))this.renderQueue.obstacleModifiers=!0,this.computeProvidedStats();if(U.namespace==="bypassAgilityCosts")return;if(this.totalCurrentMasteryLevel===this.trueMaxTotalMasteryLevel)this.fireMaximumMasteryModal()}),L.patch(Agility,"onMasteryLevelUp").after((K,U,z,X)=>{if(U.namespace==="bypassAgilityCosts"&&X>=99)game.agility.computeProvidedStats(),game.agility.renderQueue.obstacleModifiers=!0}),L.patch(SkillWithMastery,"updateTotalCurrentMasteryLevel").replace(function(K){if(!SkillWithMastery instanceof Agility)return K();this._totalCurrentMasteryLevel.clear();const U=new SparseNumericMap;this.actionMastery.forEach(({level:z},X)=>{if(X.namespace==="bypassAgilityCosts"&&X!==void 0)return;if(!(X instanceof DummyMasteryAction))this._totalCurrentMasteryLevel.add(X.namespace,z),U.add(X.namespace,1)}),this.totalMasteryActions.forEach((z,X)=>{this._totalCurrentMasteryLevel.add(X,z-U.get(X))})}),L.patch(SkillWithMastery,"computeTotalMasteryActions").replace(function(K){if(!SkillWithMastery instanceof Agility)return K();this.actions.namespaceMaps.forEach((U,z)=>{if(z!=="bypassAgilityCosts")this.totalMasteryActions.set(z,U.size)})})}function s(){L.patch(Agility,"getObstacleGP").replace(function(K,U){let z=H.get("gp-rewards");if(!W.get("merge-all")&&U.namespace==="bypassAgilityCosts")z=0;return Math.floor(U.gpReward*z*(1+this.getGPModifier(U)/100)+this.game.modifiers.increasedGPFlat)}),L.patch(Agility,"addXP").before((K,U)=>[K*H.get("xp-rewards"),U]),L.patch(Agility,"renderCourseRates").replace(function(){let K=H.get("xp-rewards");if(!this.renderQueue.obstacleRates)return;let U=!0,z=0,X=0,F=0;const J=this.numObstaclesUnlocked;for(let Y=0;Y<J;Y++){const Z=this.builtObstacles.get(Y);if(Z!==void 0){const j=this.getObstacleInterval(Z),h=this.modifyXP(Z.baseExperience*K,Z),D=this.getObstacleGP(Z);if(U)z+=j,X+=h,F+=D;agilityObstacleMenus[Y].updateRates(j,h,D)}else U=!1}document.getElementById("agility-breakdown-interval").textContent=templateLangString("MENU_TEXT_SECONDS_SHORT",{seconds:formatFixed(z/1000,2)}),document.getElementById("agility-breakdown-xp").textContent=templateLangString("MENU_TEXT_XP_AMOUNT",{xp:formatNumber(Math.floor(X))}),document.getElementById("agility-breakdown-gp").textContent=templateLangString("MENU_TEXT_GP_AMOUNT",{gp:formatNumber(F)}),this.renderQueue.obstacleRates=!1}),L.patch(AgilityObstacleSelection,"setObstacle").replace(function(K,U){let z=W.get("bypass-level-req");if(this.obstacleOnlyElements.forEach(showElement),this.link.onclick=()=>game.agility.buildObstacleOnClick(U),this.setBuildStatus(game.agility.isObstacleBuilt(U)),U.namespace=="bypassAgilityCosts")W.get("merge-all")?this.name.textContent=`${U.name}`:this.name.textContent=`Disabled ${U.name}`;else this.name.textContent=U.name;this.interval.textContent=templateLangString("MENU_TEXT_SECONDS_SHORT",{seconds:formatFixed(game.agility.getObstacleInterval(U)/1000,2)});const X=game.agility.getMasteryProgress(U);this.masteryLevel.textContent=`${X.level}`,this.masteryPercent.textContent=`(${formatPercent(X.percent,2)})`,this.buildCount.textContent="",this.buildCount.append(...templateLangStringWithNodes("MENU_TEXT_BUILD_COUNT",{count:createElement("span",{classList:["text-warning"],text:`${game.agility.getObstacleBuildCount(U)}`})},{}));const F=100+game.agility.getObstacleCostModifier(U),J=100+game.agility.getObstacleItemCostModifier(U);this.gpReduction.textContent=formatPercent(100-F),this.scReduction.textContent=formatPercent(100-F),this.itemReduction.textContent=formatPercent(100-J);const Y=game.agility.getObstacleBuildCosts(U);if(this.setCosts(Y.getItemQuantityArray(),Y.gp,Y.sc,U),this.requirementContainer.textContent="",U.skillRequirements.length===0)this.requirementContainer.append(createElement("span",{classList:["font-size-sm","font-w400","mr-2","ml-2","text-success"],text:getLangString("MENU_TEXT_NO_REQUIREMENT")}));else U.skillRequirements.forEach((Z)=>{let j=game.checkSkillRequirement(Z,!1)?"text-success":"text-danger";if(z)j="text-success";const h=this.createInlineRequirement(j);if(this.requirementContainer.append(h),z)h.setContent(Z.skill.media,templateLangString("MENU_TEXT_LEVEL",{level:"0"}),Z.skill.name);else h.setContent(Z.skill.media,templateLangString("MENU_TEXT_LEVEL",{level:`${Z.level}`}),Z.skill.name)});if(this.gpGrants.textContent=formatNumber(game.agility.getObstacleGP(U)),this.xpGrants.textContent=templateLangString("MENU_TEXT_XP_AMOUNT",{xp:formatNumber(Math.floor(game.agility.modifyXP(U.baseExperience)))}),this.setPassives(x(U)),W.get("link-passives")&&U.namespace!="bypassAgilityCosts")this.setPassives(g(U),!0)}),L.patch(BuiltAgilityObstacle,"setBuiltObstacle").replace(function(K,U){if(this.setTier(U.category),U.namespace=="bypassAgilityCosts")W.get("merge-all")?this.name.textContent=`${U.name}`:this.name.textContent=`Disabled ${U.name}`;else this.name.textContent=U.name;this.masteryDisplay.setMastery(game.agility,U),game.agility.updateMasteryDisplays(U),this.blockContainer.classList.remove("pointer-enabled"),this.blockContainer.onclick=null,this.selectObstacleButton.onclick=()=>game.agility.viewObstacleSelectionOnClick(U.category),this.destroyObstacleButton.onclick=()=>game.agility.destroyObstacleOnClick(U.category),showElement(this.builtContent),hideElement(this.unbuiltContent)}),L.patch(AgilityObstacleSelection,"setCosts").replace(function(K,U,z,X,F){let J=game.agility.pillars.allObjects.some((Q)=>F===Q)||game.agility.elitePillars.allObjects.some((Q)=>F===Q),Y=P.get("obstacle-costs"),Z=P.get("pillar-costs"),j=game.agility.obstacleBuildCount.get(F),h=W.get("buy-first")&&j>0;this.costContainer.textContent="";const D=(Q,B,k,V)=>{const w=this.createInlineRequirement(V>=B?"text-success":"text-danger");if(this.costContainer.append(w),J&&!f()&&Z>0)w.setContent(Q,formatNumber(B),k);else h||Y==0||f()||Z==0&&J?w.setContent(Q,B,k):w.setContent(Q,formatNumber(B),k)};if(U.forEach(({item:Q,quantity:B})=>{if(J)if(Z==0){D(Q.media,getLangString("MENU_TEXT_NONE"),`${Q.name} cost bypassed`,getLangString("MENU_TEXT_NONE"));return}else if(f()){D(Q.media,getLangString("MENU_TEXT_NONE"),`${Q.name} cost bypassed with max mastery`,getLangString("MENU_TEXT_NONE"));return}else{D(Q.media,B,Q.name,game.bank.getQty(Q));return}if(Y==0){D(Q.media,getLangString("MENU_TEXT_NONE"),`${Q.name} cost bypassed`,getLangString("MENU_TEXT_NONE"));return}if(f()){D(Q.media,getLangString("MENU_TEXT_NONE"),`${Q.name} cost bypassed with max mastery`,getLangString("MENU_TEXT_NONE"));return}h?D(Q.media,getLangString("MENU_TEXT_NONE"),`${Q.name} cost bypassed after first build`,getLangString("MENU_TEXT_NONE")):D(Q.media,B,Q.name,game.bank.getQty(Q))}),U.length==0||z==0){if(h&&!J){if(D(cdnMedia("assets/media/main/coins.svg"),getLangString("MENU_TEXT_NONE"),`${getLangString("MENU_TEXT","GP")} cost bypassed after first build`,getLangString("MENU_TEXT_NONE")),F.scCost>0)D(cdnMedia("assets/media/main/slayer_coins.svg"),getLangString("MENU_TEXT_NONE"),`${getLangString("MENU_TEXT","SLAYER_COINS")} cost bypassed after first build`,getLangString("MENU_TEXT_NONE"))}else if(Y==0&&!J||Z==0&&J){if(D(cdnMedia("assets/media/main/coins.svg"),getLangString("MENU_TEXT_NONE"),`${getLangString("MENU_TEXT_GP")} cost bypassed`,getLangString("MENU_TEXT_NONE")),F.scCost>0)D(cdnMedia("assets/media/main/slayer_coins.svg"),getLangString("MENU_TEXT_NONE"),`${getLangString("MENU_TEXT_SLAYER_COINS")} cost bypassed`,getLangString("MENU_TEXT_NONE"))}else if(f()){if(D(cdnMedia("assets/media/main/coins.svg"),getLangString("MENU_TEXT_NONE"),`${getLangString("MENU_TEXT","GP")} cost bypassed with max mastery`,getLangString("MENU_TEXT_NONE")),F.scCost>0)D(cdnMedia("assets/media/main/slayer_coins.svg"),getLangString("MENU_TEXT_NONE"),`${getLangString("MENU_TEXT","SLAYER_COINS")} cost bypassed with max mastery`,getLangString("MENU_TEXT_NONE"))}}if(z>0)D(cdnMedia("assets/media/main/coins.svg"),z,getLangString("MENU_TEXT_GP"),game.gp.amount);if(X>0)D(cdnMedia("assets/media/main/slayer_coins.svg"),X,getLangString("MENU_TEXT_SLAYER_COINS"),game.slayerCoins.amount)}),L.patch(AgilityObstacleSelection,"setPillar").replace(function(K,U){this.obstacleOnlyElements.forEach(hideElement),this.link.onclick=()=>game.agility.buildPillarOnClick(U),this.setBuildStatus(game.agility.isPillarBuilt(U)),this.name.textContent=U.name;const z=game.agility.getPillarBuildCosts(U);this.setCosts(z.getItemQuantityArray(),z.gp,z.sc,U),this.setPassives(game.agility.getPillarModifiers(U))}),L.patch(AgilityObstacleSelection,"setElitePillar").replace(function(K,U){this.obstacleOnlyElements.forEach(hideElement),this.link.onclick=()=>game.agility.buildElitePillarOnClick(U),this.setBuildStatus(game.agility.isElitePillarBuilt(U)),this.name.textContent=U.name;const z=game.agility.getPillarBuildCosts(U);this.setCosts(z.getItemQuantityArray(),z.gp,z.sc,U),this.setPassives(game.agility.getPillarModifiers(U))}),L.patch(Agility,"buildObstacleOnClick").replace(function(K,U){const z=this.getObstacleBuildCosts(U);if(W.get("bypass-level-req")){if(!z.checkIfOwned()||this.level<this.getObstacleLevel(U.category))return}else if(!z.checkIfOwned()||this.level<this.getObstacleLevel(U.category)||!this.game.checkRequirements(U.skillRequirements,!0))return;SwalLocale.fire({title:getLangString("MENU_TEXT_BUILD_OBSTACLE?"),html:`<h5 class="font-w400 text-combat-smoke font-size-sm mb-2">${getLangString("MENU_TEXT_REPLACE_OBSTACLE")}</h5><h5 class="font-w600 text-danger font-size-sm mb-1">${getLangString("MENU_TEXT_CANNOT_UNDO")}</h5>`,showCancelButton:!0,icon:"warning",confirmButtonText:getLangString("MENU_TEXT_BUILD")}).then((F)=>{if(F.value)$("#modal-select-agility-obstacle").modal("hide"),this.buildObstacle(U)})})}L.onModsLoaded((K)=>{a(),s(),K.patch(Agility,"replaceCourseWithBlueprint").replace(function(U,z){const X=this.numObstaclesUnlocked;for(let F=0;F<X;F++){const J=z.obstacles.get(F);if(J!==void 0){if(!this.isObstacleBuilt(J))this.buildObstacle(J)}else this.destroyObstacle(F)}if(z.pillar!==void 0&&!this.isPillarBuilt(z.pillar))this.buildPillar(z.pillar);if(z.elitePillar!==void 0&&!this.isElitePillarBuilt(z.elitePillar))this.buildElitePillar(z.elitePillar)}),K.patch(Player,"getMonsterSpawnTime").after(function(U){if(W.get("merge-all")||H.get("pos-mult-mod")>1)return Math.max(U,250)}),c()}),L.onCharacterSelectionLoaded((K)=>{game.agility.sortedMasteryActions=game.agility.sortedMasteryActions.filter((U)=>U.namespace!="bypassAgilityCosts")}),L.onCharacterLoaded((K)=>{N(W.get("merge-all")),i()}),L.onInterfaceReady(()=>{game.agility.computeProvidedStats(),game.agility.renderQueue.builtObstacles=!0})}export{Y0 as setup};
